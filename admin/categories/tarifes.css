<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Tarifs - WEMANTCHE Admin</title>
    <link rel="icon" type="image/jpg" href="../../assets/images/WEMANTCHE LOGO p 2.png">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</head>
<style>
        /* Variables et thème sombre */
        :root {
            --bg-dark: #1a1f2d;
            --bg-card: #242a38;
            --primary: #4361ee;
            --secondary: #3f37c9;
            --success: #2dd4bf;
            --danger: #f43f5e;
            --warning: #f59e0b;
            --info: #3b82f6;
            --text-light: #94a3b8;
            --text-white: #ffffff;
            --border-color: rgba(255, 255, 255, 0.1);
        }

        /* Style de base */
        body {
            background: var(--bg-dark);
            color: var(--text-white);
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
        }

        /* Layout */
        .admin-wrapper {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: var(--bg-card);
            border-right: 1px solid var(--border-color);
            position: fixed;
            height: 100vh;
            left: 0;
            top: 0;
        }

        .sidebar-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-color);
            background: rgba(67, 97, 238, 0.1);
        }

        .sidebar-header .d-flex {
            gap: 1rem;
            align-items: center;
        }

        .sidebar-logo {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            object-fit: cover;
        }

        /* Pour aligner le logo et le texte */
        .gap-2 {
            gap: 0.5rem;
        }

        .sidebar-nav {
            padding: 1rem 0;
        }

        .nav-link {
            color: var(--text-light);
            padding: 0.75rem 1.5rem;
            transition: all 0.3s ease;
            border-left: 3px solid transparent;
        }

        .nav-link:hover,
        .nav-link.active {
            color: var(--text-white);
            background: rgba(67, 97, 238, 0.1);
            border-left-color: var(--primary);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 280px;
            padding: 2rem;
        }

        /* Cards */
        .card {
            background: var(--bg-card);
            border: 1px solid var(--border-color);
            border-radius: 12px;
        }

        .card-header {
            background: rgba(67, 97, 238, 0.1);
            border-bottom: 1px solid var(--border-color);
        }

        /* Stats Cards Styling */
        .stats-wrapper {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stats-card {
            background: linear-gradient(145deg, var(--bg-card), var(--bg-dark));
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 1.5rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stats-card:nth-child(1) {
            background: linear-gradient(145deg, #4361ee20, #4361ee40);
            border-left: 4px solid var(--primary);
        }

        .stats-card:nth-child(2) {
            background: linear-gradient(145deg, #2dd4bf20, #2dd4bf40);
            border-left: 4px solid var(--success);
        }

        .stats-card:nth-child(3) {
            background: linear-gradient(145deg, #3b82f620, #3b82f640);
            border-left: 4px solid var(--info);
        }

        .stats-card:nth-child(4) {
            background: linear-gradient(145deg, #f59e0b20, #f59e0b40);
            border-left: 4px solid var(--warning);
        }

        .stats-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

        .stats-icon {
            width: 54px;
            height: 54px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-right: 1rem;
            position: relative;
            z-index: 1;
        }

        .stats-icon::before {
            content: '';
            position: absolute;
            inset: 0;
            border-radius: 12px;
            opacity: 0.2;
            z-index: -1;
        }

        .stats-icon.bg-primary { 
            color: var(--primary);
            background: linear-gradient(145deg, #4361ee30, #4361ee10);
        }

        .stats-icon.bg-success { 
            color: var(--success);
            background: linear-gradient(145deg, #2dd4bf30, #2dd4bf10);
        }

        .stats-icon.bg-info { 
            color: var(--info);
            background: linear-gradient(145deg, #3b82f630, #3b82f610);
        }

        .stats-icon.bg-warning { 
            color: var(--warning);
            background: linear-gradient(145deg, #f59e0b30, #f59e0b10);
        }

        .stats-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-white);
            margin-bottom: 0.25rem;
            line-height: 1;
        }

        .stats-label {
            color: var(--text-light);
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            opacity: 0.8;
        }

        /* En-tête styling */
        .h3 {
            color: var(--text-white);
            font-weight: 600;
            font-size: 1.5rem;
            margin-bottom: 0;
        }

        .btn-primary {
            background: linear-gradient(145deg, var(--primary), #2d3fff);
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background: linear-gradient(145deg, #2d3fff, var(--primary));
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(67, 97, 238, 0.3);
        }

        /* Tables */
        .table {
            color: var(--text-white);
        }

        .table th {
            background: rgba(67, 97, 238, 0.1);
            color: var(--text-light);
            border-bottom: 1px solid var(--border-color);
        }

        .table td {
            border-bottom: 1px solid var(--border-color);
        }

        .table th,
        .table td {
            vertical-align: middle;
        }

        /* Badges */
        .badge {
            padding: 0.5em 1em;
            border-radius: 6px;
            font-weight: 500;
        }

        .badge.bg-success { background: var(--success) !important; }
        .badge.bg-warning { background: var(--warning) !important; }
        .badge.bg-info { background: var(--info) !important; }

        /* Charts */
        .chart-card {
            background: var(--bg-card);
            border-radius: 12px;
            padding: 1.5rem;
            border: 1px solid var(--border-color);
        }

        /* Buttons */
        .btn-primary {
            background: var(--primary);
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
        }

        .btn-primary:hover {
            background: #2d3fff;
            transform: translateY(-2px);
        }

        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }

        /* Activity table */
        .activity-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
        }

        .activity-user {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        /* Responsive */
        @media (max-width: 991.98px) {
            .sidebar {
                transform: translateX(-100%);
                z-index: 1000;
            }

            .sidebar.active {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }
        }

        @media (max-width: 768px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }

            .row {
                margin: 0;
            }
        }

        /* Ajout des styles pour les cartes de statistiques */
        .stats-card {
            background: var(--bg-card);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 1.5rem;
            transition: all 0.3s ease;
            height: 100%;
        }

        .stats-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        }

        .stats-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            margin-bottom: 1rem;
        }
        

        /* Gradients pour les icônes */
        .stats-icon.bg-primary { 
            background: linear-gradient(135deg, var(--primary), #2d3fff);
            color: var(--text-white);
        }

        .stats-icon.bg-success { 
            background: linear-gradient(135deg, var(--success), #20a4f3);
            color: var(--text-white);
        }

        .stats-icon.bg-info { 
            background: linear-gradient(135deg, var(--info), #0ea5e9);
            color: var(--text-white);
        }

        .stats-icon.bg-warning { 
            background: linear-gradient(135deg, var(--warning), #ff8a00);
            color: var(--text-white);
        }

        /* Style des textes */
        .stats-value {
            font-size: 1.875rem;
            font-weight: 600;
            color: var(--text-white);
            margin-bottom: 0.5rem;
        }

        .stats-label {
            color: var(--text-light);
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* Mise en page des cartes */
        .stats-wrapper {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        /* Styles pour le modal et les notifications */
        .modal-content {
            background: var(--bg-card);
            border: 1px solid var(--border-color);
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            border-bottom: 1px solid var(--border-color);
            background: rgba(67, 97, 238, 0.1);
            padding: 1rem 1.5rem;
        }

        .modal-footer {
            border-top: 1px solid var(--border-color);
            padding: 1rem 1.5rem;
        }

        .modal-title {
            color: var(--text-white);
            font-weight: 600;
        }

        .btn-close {
            filter: invert(1) grayscale(100%) brightness(200%);
        }

        /* Styles pour les formulaires dans le modal */
        .modal-body {
            padding: 1.5rem;
        }

        .form-label {
            color: var(--text-white);
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .form-control, 
        .form-select {
            background-color: var(--bg-dark);
            border: 1px solid var(--border-color);
            color: var(--text-white);
            transition: all 0.3s ease;
        }

        .form-control:focus, 
        .form-select:focus {
            background-color: var(--bg-dark);
            border-color: var(--primary);
            box-shadow: 0 0 0 0.2rem rgba(67, 97, 238, 0.25);
            color: var(--text-white);
        }

        .form-control::placeholder {
            color: var(--text-light);
        }

        .form-select option {
            background-color: var(--bg-dark);
            color: var(--text-white);
        }

        .form-check-label {
            color: var(--text-white);
        }

        .form-check-input {
            background-color: var(--bg-dark);
            border-color: var(--border-color);
        }

        .form-check-input:checked {
            background-color: var(--primary);
            border-color: var(--primary);
        }

        /* Boutons du modal */
        .btn-secondary {
            background: var(--bg-dark);
            border: 1px solid var(--border-color);
            color: var(--text-white);
        }

        .btn-secondary:hover {
            background: var(--bg-card);
            border-color: var(--border-color);
            color: var(--text-white);
        }

        .modal .btn-primary {
            background: linear-gradient(145deg, var(--primary), #2d3fff);
            border: none;
            font-weight: 500;
        }

        .modal .btn-primary:hover {
            background: linear-gradient(145deg, #2d3fff, var(--primary));
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(67, 97, 238, 0.3);
        }

        /* Styles pour l'en-tête */
        .page-header {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            color: var(--text-white);
        }

        .page-header h1 {
            margin: 0;
            font-weight: 600;
            color: var(--text-white);
        }

        .page-header .btn-light {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: var(--text-white);
            transition: all 0.3s ease;
        }

        .page-header .btn-light:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        /* Style pour les titres et placeholders */
        h1, h2, h3, h4, h5, h6,
        .card-title,
        .modal-title {
            color: var(--text-white) !important;
        }

        /* Style pour les placeholders */
        ::-webkit-input-placeholder {
            color: var(--text-white) !important;
            opacity: 0.7 !important;
        }

        ::-moz-placeholder {
            color: var(--text-white) !important;
            opacity: 0.7 !important;
        }

        :-ms-input-placeholder {
            color: var(--text-white) !important;
            opacity: 0.7 !important;
        }

        ::placeholder {
            color: var(--text-white) !important;
            opacity: 0.7 !important;
        }

        /* Style pour les inputs et selects */
        .form-control,
        .form-select {
            background-color: var(--bg-dark) !important;
            border-color: var(--border-color) !important;
            color: var(--text-white) !important;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--primary) !important;
            box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.25) !important;
        }

        /* Style pour les labels */
        .form-label {
            color: var(--text-white) !important;
            font-weight: 500;
        }

        /* Style pour les options du select */
        .form-select option {
            background-color: var(--bg-dark);
            color: var(--text-white);
        }

        /* Style pour les en-têtes de tableau */
        .table thead th {
            color: var(--text-white) !important;
            font-weight: 500;
        }

        .btn-group .btn {
            color: var(--text-white);
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid var(--border-color);
        }

        .btn-group .btn.active {
            background: var(--primary);
            border-color: var(--primary);
        }

        .btn-group .btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .table th {
            white-space: nowrap;
        }

        /* Style pour la table responsive */
        .table-responsive {
            margin-bottom: 1rem;
            overflow-x: auto;
        }

        .table {
            width: 100%;
            white-space: nowrap;
        }

        .table th {
            background: rgba(67, 97, 238, 0.1);
            font-weight: 600;
            padding: 1rem;
        }

        .table td {
            padding: 1rem;
            vertical-align: middle;
        }

        .btn-group-action {
            display: flex;
            gap: 0.5rem;
        }

        .btn-group-action .btn {
            padding: 0.25rem 0.5rem;
        }

        /* Pour rendre certaines colonnes plus compactes */
        .table th:nth-child(5),
        .table th:nth-child(6),
        .table th:nth-child(7),
        .table th:nth-child(8) {
            width: 100px;
        }

        .table th:last-child {
            width: 120px;
        }

        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
            max-width: 100%;
            margin: 0;
            padding: 0;
        }

        .table {
            width: 100%;
            margin-bottom: 0;
            color: var(--text-white);
            vertical-align: top;
            border-color: var(--border-color);
        }

        .table th {
            white-space: nowrap;
            padding: 1rem;
            background: rgba(67, 97, 238, 0.1);
        }

        .table td {
            padding: 1rem;
            vertical-align: middle;
        }

        /* Style pour les boutons d'action */
        .btn-group-action {
            display: flex;
            gap: 0.5rem;
            justify-content: flex-end;
            align-items: center;
        }

        .btn-action {
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
            border-radius: 0.25rem;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        /* Style du bouton flottant */
.btn-floating {
    position: fixed;
    bottom: 30px;
    right: 30px;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    z-index: 1000;
    transition: all 0.3s ease;
}

.btn-floating:hover {
    transform: scale(1.1) rotate(90deg);
    box-shadow: 0 6px 20px rgba(67, 97, 238, 0.4);
}

/* Animation de l'icône */
.btn-floating i {
    transition: all 0.3s ease;
}

.btn-floating:hover i {
    transform: rotate(-90deg);
}

/* Style pour la modal de visualisation des tarifs */
.view-pricing-modal .table {
    margin-bottom: 0;
}

.view-pricing-modal .table th {
    width: 40%;
    background: rgba(67, 97, 238, 0.1);
    color: var(--text-white);
}

.view-pricing-modal .table td {
    color: var(--text-white);
}

.view-pricing-modal .swal2-html-container {
    margin: 1em 0;
}

.view-pricing-modal .swal2-popup {
    background: var(--bg-card);
    border: 1px solid var(--border-color);
}

.view-pricing-modal .swal2-title {
    color: var(--text-white);
}

/* Ajouter ces styles dans votre section CSS existante */
.table-responsive {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    margin: 0;
    padding: 0;
}

@media (max-width: 1200px) {
    .table {
        display: block;
        width: 100%;
    }
    
    .table thead {
        display: none;
    }
    
    .table tbody tr {
        display: block;
        margin-bottom: 1rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        background: var(--bg-card);
    }
    
    .table td {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border: none;
        padding: 0.75rem 1rem;
        text-align: right;
    }
    
    .table td::before {
        content: attr(data-label);
        font-weight: 600;
        margin-right: 1rem;
        color: var(--text-light);
    }
    
    .btn-group-action {
        justify-content: flex-end;
    }
}

.table th, .table td {
    white-space: nowrap;
    padding: 1rem;
    vertical-align: middle;
}

.table th {
    font-weight: 600;
    background: rgba(67, 97, 238, 0.1);
    text-align: left;
}

.text-end {
    text-align: right !important;
}

.text-center {
    text-align: center !important;
}

.badge {
    font-size: 0.75rem;
    padding: 0.35em 0.65em;
}

.btn-group-action {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
}

@media (max-width: 992px) {
    .table td {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border: none;
        padding: 0.75rem 1rem;
    }

    .table td::before {
        content: attr(data-label);
        font-weight: 600;
        margin-right: 1rem;
    }

    .table thead {
        display: none;
    }

    .table tbody tr {
        display: block;
        border: 1px solid var(--border-color);
        margin-bottom: 1rem;
        border-radius: 8px;
    }
}

/* Styles responsive */
@media (max-width: 768px) {
    /* Layout principal */
    .main-content {
        margin-left: 0;
        padding: 1rem;
    }

    /* Sidebar mobile */
    .sidebar {
        transform: translateX(-100%);
        z-index: 1050;
        transition: transform 0.3s ease;
    }

    .sidebar.active {
        transform: translateX(0);
    }

    /* En-tête de page */
    .page-header {
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .page-header .d-flex {
        flex-direction: column;
        gap: 1rem;
    }

    .page-header h1 {
        font-size: 1.5rem;
    }

    /* Table responsive */
    .table-responsive {
        margin: -1rem;
    }

    .table tbody tr {
        display: flex;
        flex-direction: column;
        margin-bottom: 1rem;
        background: var(--bg-card);
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .table td {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 1rem;
        border: none;
        text-align: right;
    }

    .table td::before {
        content: attr(data-label);
        font-weight: 600;
        text-align: left;
        color: var(--text-light);
    }

    /* Modal */
    .modal-dialog {
        margin: 0.5rem;
        max-width: calc(100% - 1rem);
    }

    .modal-content {
        border-radius: 12px;
    }

    .modal-body {
        padding: 1rem;
    }

    .modal-footer {
        flex-direction: column;
        gap: 0.5rem;
    }

    .modal-footer .btn {
        width: 100%;
    }

    /* Boutons d'action */
    .btn-group-action {
        justify-content: center;
        width: 100%;
        margin-top: 0.5rem;
    }

    .btn-group-action .btn {
        flex: 1;
        padding: 0.5rem;
    }

    /* Bouton flottant */
    .btn-floating {
        bottom: 20px;
        right: 20px;
        width: 50px;
        height: 50px;
    }
}

/* Ajustements pour très petits écrans */
@media (max-width: 375px) {
    .page-header .btn {
        width: 100%;
    }

    .modal-body {
        padding: 0.75rem;
    }

    .table td {
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
    }
}

/* Menu burger pour mobile */
.navbar-toggler {
    display: none;
    position: fixed;
    top: 1rem;
    left: 1rem;
    z-index: 1060;
    padding: 0.5rem;
    background: var(--primary);
    border-radius: 8px;
}

@media (max-width: 768px) {
    .navbar-toggler {
        display: flex;
    }
}

/* Styles pour le tableau */
.table th {
    background: rgba(67, 97, 238, 0.1);
    font-weight: 600;
    white-space: nowrap;
}

.table td {
    vertical-align: middle;
}

/* Alignements spécifiques */
.text-end {
    text-align: right !important;
}

.text-center {
    text-align: center !important;
}

/* Style des badges */
.badge {
    font-size: 0.75rem;
    padding: 0.35em 0.65em;
}

.badge.bg-primary {
    background: var(--primary) !important;
}

.badge.bg-warning {
    background: var(--warning) !important;
}

/* Responsive design */
@media (max-width: 992px) {
    .table td {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 1rem;
    }

    .table td::before {
        content: attr(data-label);
        font-weight: 600;
        margin-right: 1rem;
    }

    .table td.text-end,
    .table td.text-center {
        text-align: right !important;
    }

    .btn-group-action {
        justify-content: flex-end;
        width: auto;
    }
}

/* Styles pour la pagination améliorée */
.pagination {
    --bs-pagination-padding-x: 0.75rem;
    --bs-pagination-padding-y: 0.375rem;
    --bs-pagination-font-size: 0.875rem;
    --bs-pagination-color: var(--text-light);
    --bs-pagination-bg: transparent;
    --bs-pagination-border-width: 0;
    --bs-pagination-border-color: transparent;
    --bs-pagination-border-radius: 0.375rem;
    --bs-pagination-hover-color: var(--text-white);
    --bs-pagination-hover-bg: rgba(67, 97, 238, 0.2);
    --bs-pagination-hover-border-color: transparent;
    --bs-pagination-focus-color: var(--text-white);
    --bs-pagination-focus-bg: rgba(67, 97, 238, 0.3);
    --bs-pagination-focus-box-shadow: 0 0 0 0.1rem rgba(67, 97, 238, 0.25);
    --bs-pagination-active-color: var(--text-white);
    --bs-pagination-active-bg: var(--primary);
    --bs-pagination-active-border-color: var(--primary);
    --bs-pagination-disabled-color: var(--text-light);
    --bs-pagination-disabled-bg: transparent;
    --bs-pagination-disabled-border-color: transparent;
    gap: 0.25rem;
}

.page-link {
    min-width: 2.25rem;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
}

.page-link i {
    font-size: 0.875rem;
}

.page-item.active .page-link {
    font-weight: 600;
    box-shadow: 0 2px 5px rgba(67, 97, 238, 0.3);
}

.page-item:not(.active):not(.disabled) .page-link:hover {
    transform: translateY(-1px);
}

@media (max-width: 768px) {
    .pagination {
        --bs-pagination-padding-x: 0.5rem;
        --bs-pagination-padding-y: 0.25rem;
        --bs-pagination-font-size: 0.75rem;
        gap: 0.125rem;
    }
    
    .page-link {
        min-width: 1.75rem;
    }
}
</style>
<body>
    <!-- Ajouter juste après l'ouverture du body -->
    <button class="navbar-toggler" type="button" onclick="toggleSidebar()">
        <i class="fas fa-bars text-white"></i>
    </button>

    <div class="admin-wrapper">
        <!-- Sidebar -->
        <nav class="sidebar">
            <div class="sidebar-header">
                <div class="d-flex align-items-center">
                    <img src="../../assets/images/WEMANTCHE LOGO p 2.png" alt="Logo" class="sidebar-logo me-3">
                    <h5 class="mb-0">WEMANTCHE</h5>
                </div>
            </div>
            
            <ul class="sidebar-nav">
                <li class="nav-item active">
                    <a href="../dashboard.php" class="nav-link">
                        <i class="fas fa-home"></i>
                        <span>Tableau de bord</span>
                    </a>
                </li> 
                <li class="nav-item">
                    <a href="../categories/index.php" class="nav-link">
                        <i class="fas fa-folder"></i>
                        <span>Catégories</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="../documents/index.php" class="nav-link">
                        <i class="fas fa-file-alt"></i>
                        <span>Documents</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="../redaction/demandes.php" class="nav-link">
                        <i class="fas fa-pen-fancy"></i>
                        <span>Demandes</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="../contacts/index.php" class="nav-link">
                        <i class="fas fa-envelope"></i>
                        <span>Messages</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="../users/index.php" class="nav-link">
                        <i class="fas fa-users"></i>
                        <span>Utilisateurs</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="../settings.php" class="nav-link">
                        <i class="fas fa-cog"></i>
                        <span>Paramètres</span>
                    </a>
                </li>
            </ul>
        </nav>

        <!-- Contenu principal -->
        <main class="main-content">
            <div class="container-fluid py-4">
                <!-- En-tête de la page -->
                <div class="page-header mb-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <h1 class="h3">Gestion des Tarifs</h1>
                        <button class="btn btn-primary" onclick="window.location.href='index.php'">
                            <i class="fas fa-arrow-left me-2"></i>Retour aux catégories
                        </button>
                    </div>
                </div>

                <!-- Bouton flottant d'ajout -->
                <button class="btn btn-primary btn-floating" onclick="openAddModal()">
                    <i class="fas fa-plus"></i>
                </button>

                <!-- Ajouter avant la table -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row align-items-center g-3">
                            <div class="col-md-4">
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-search"></i>
                                    </span>
                                    <input type="text" class="form-control" id="searchInput" placeholder="Rechercher..." oninput="filterTable()">
                                </div>
                            </div>
                            <div class="col-md-auto ms-auto">
                                <div class="d-flex align-items-center">
                                    <label class="me-2 text-white">Afficher</label>
                                    <select class="form-select form-select-sm" id="pageSizeSelect">
                                        <option value="5">5</option>
                                        <option value="10" selected>10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>
                                    <label class="ms-2 text-white">lignes</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Table des tarifs -->
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th scope="col">Catégorie</th>
                                        <th scope="col">Niveau</th>
                                        <th scope="col" class="text-end">Prix Standard</th>
                                        <th scope="col" class="text-end">Prix Urgent</th>
                                        <th scope="col" class="text-center">Seuil Mots</th>
                                        <th scope="col" class="text-end">Prix/Mot</th>
                                        <th scope="col" class="text-center">Délais (j)</th>
                                        <th scope="col" class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="pricingList">
                                    <!-- Les données seront insérées ici dynamiquement -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Ajouter après la table -->
                <div class="card-footer">
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-center">
                        <!-- Information sur le nombre d'entrées -->
                        <div class="mb-2 mb-md-0 text-white">
                            Affichage de <span id="startIndex">0</span> à <span id="endIndex">0</span> sur <span id="totalItems">0</span> entrées
                        </div>

                        <!-- Pagination améliorée -->
                        <nav aria-label="Navigation des pages">
                            <ul class="pagination mb-0" id="pagination">
                                <li class="page-item disabled" id="prevFirst">
                                    <a class="page-link" href="#" aria-label="Première page">
                                        <i class="fas fa-angle-double-left"></i>
                                    </a>
                                </li>
                                <li class="page-item disabled" id="prevPage">
                                    <a class="page-link" href="#" aria-label="Précédent">
                                        <i class="fas fa-angle-left"></i>
                                    </a>
                                </li>
                                <!-- Les numéros de page seront insérés ici dynamiquement -->
                                <li class="page-item disabled" id="nextPage">
                                    <a class="page-link" href="#" aria-label="Suivant">
                                        <i class="fas fa-angle-right"></i>
                                    </a>
                                </li>
                                <li class="page-item disabled" id="nextLast">
                                    <a class="page-link" href="#" aria-label="Dernière page">
                                        <i class="fas fa-angle-double-right"></i>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>

                <!-- Modal Tarification -->
                <div class="modal fade" id="pricingModal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Tarification</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <form id="pricingForm">
                                    <input type="hidden" name="id">
                                    
                                    <div class="mb-3">
                                        <label class="form-label">Catégorie</label>
                                        <select class="form-select" name="categorie_id" required id="categorieSelect">
                                            <option value="">Sélectionner une catégorie</option>
                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Prix Standard (FCFA)</label>
                                        <input type="number" class="form-control" name="prix_standard" required min="0">
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Prix Urgent (FCFA)</label>
                                        <input type="number" class="form-control" name="prix_urgent" min="0">
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Seuil Mots</label>
                                        <input type="number" class="form-control" name="seuil_mots" value="1000" min="0">
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Prix par Mot Supplémentaire (FCFA)</label>
                                        <input type="number" class="form-control" name="prix_par_mot_supp" value="500" min="0">
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Délai Standard (jours)</label>
                                        <input type="number" class="form-control" name="delai_standard_jours" value="7" min="1">
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Délai Urgent (jours)</label>
                                        <input type="number" class="form-control" name="delai_urgent_jours" min="1">
                                    </div>

                                    <!-- Ajout des champs Classe et Filière -->
                                    <div class="mb-3" id="classeField">
                                        <label class="form-label text-white">Classe</label>
                                        <select class="form-select" name="classe">
                                            <option value="">Sélectionner une classe</option>
                                        </select>
                                        <small class="text-white">Facultatif - Pour les documents scolaires</small>
                                    </div>

                                    <div class="mb-3" id="filiereField">
                                        <label class="form-label text-white">Filière</label>
                                        <select class="form-select" name="filiere">
                                            <option value="">Sélectionner une filière</option>
                                        </select>
                                        <small class="text-white">Facultatif - Pour les documents universitaires</small>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                                <button type="submit" form="pricingForm" class="btn btn-primary">Enregistrer</button>
                            </div>
                        </div>
                    </div>
                </div>

                <script>
                // Variables globales pour la pagination et le filtrage
                let currentPage = 1;
                let itemsPerPage = 10;
                let totalPages = 1;
                let pricingData = [];
                let filteredData = [];

                // Fonction pour filtrer le tableau
                function filterTable() {
                    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                    
                    if (searchTerm === '') {
                        filteredData = [...pricingData];
                    } else {
                        filteredData = pricingData.filter(item => {
                            return (
                                (item.nom_categorie && item.nom_categorie.toLowerCase().includes(searchTerm)) ||
                                (item.niveau_etude && item.niveau_etude.toLowerCase().includes(searchTerm)) ||
                                (item.prix_standard && item.prix_standard.toString().includes(searchTerm)) ||
                                (item.prix_urgent && item.prix_urgent.toString().includes(searchTerm)) ||
                                (item.seuil_mots && item.seuil_mots.toString().includes(searchTerm)) ||
                                (item.prix_par_mot_supp && item.prix_par_mot_supp.toString().includes(searchTerm)) ||
                                (item.delai_standard_jours && item.delai_standard_jours.toString().includes(searchTerm)) ||
                                (item.delai_urgent_jours && item.delai_urgent_jours.toString().includes(searchTerm))
                            );
                        });
                    }
                    
                    currentPage = 1;
                    updateTable();
                    updatePagination();
                }

                // Fonction pour mettre à jour la pagination
                function updatePagination() {
                    const pagination = document.getElementById('pagination');
                    const prevFirst = document.getElementById('prevFirst');
                    const prevPage = document.getElementById('prevPage');
                    const nextPage = document.getElementById('nextPage');
                    const nextLast = document.getElementById('nextLast');
                    
                    // Calculer le nombre total de pages
                    totalPages = Math.ceil(filteredData.length / itemsPerPage);
                    
                    // Désactiver/activer les boutons précédent/suivant
                    prevFirst.classList.toggle('disabled', currentPage === 1);
                    prevPage.classList.toggle('disabled', currentPage === 1);
                    nextPage.classList.toggle('disabled', currentPage === totalPages || totalPages === 0);
                    nextLast.classList.toggle('disabled', currentPage === totalPages || totalPages === 0);
                    
                    // Supprimer les numéros de page existants
                    const pageNumbers = document.querySelectorAll('.page-number');
                    pageNumbers.forEach(el => el.remove());
                    
                    // Si aucune donnée, ne pas afficher de numéros de page
                    if (totalPages === 0) return;
                    
                    // Afficher maximum 5 pages autour de la page courante
                    let startPage = Math.max(1, currentPage - 2);
                    let endPage = Math.min(totalPages, currentPage + 2);
                    
                    // Ajuster si nous sommes près du début ou de la fin
                    if (currentPage <= 3) {
                        endPage = Math.min(5, totalPages);
                    }
                    if (currentPage >= totalPages - 2) {
                        startPage = Math.max(totalPages - 4, 1);
                    }
                    
                    // Ajouter les numéros de page
                    const prevPageItem = document.getElementById('prevPage');
                    
                    // Ajouter le premier numéro avec éventuellement des points de suspension
                    if (startPage > 1) {
                        const li = document.createElement('li');
                        li.className = 'page-item page-number';
                        li.innerHTML = `<a class="page-link" href="#" onclick="changePage(1)">1</a>`;
                        prevPageItem.after(li);
                        
                        if (startPage > 2) {
                            const dots = document.createElement('li');
                            dots.className = 'page-item disabled page-number';
                            dots.innerHTML = `<span class="page-link">...</span>`;
                            prevPageItem.after(dots);
                        }
                    }
                    
                    // Ajouter les numéros de page principaux
                    for (let i = startPage; i <= endPage; i++) {
                        const li = document.createElement('li');
                        li.className = `page-item page-number ${i === currentPage ? 'active' : ''}`;
                        li.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
                        prevPageItem.after(li);
                    }
                    
                    // Ajouter le dernier numéro avec éventuellement des points de suspension
                    if (endPage < totalPages) {
                        if (endPage < totalPages - 1) {
                            const dots = document.createElement('li');
                            dots.className = 'page-item disabled page-number';
                            dots.innerHTML = `<span class="page-link">...</span>`;
                            prevPageItem.after(dots);
                        }
                        
                        const li = document.createElement('li');
                        li.className = 'page-item page-number';
                        li.innerHTML = `<a class="page-link" href="#" onclick="changePage(${totalPages})">${totalPages}</a>`;
                        prevPageItem.after(li);
                    }
                    
                    // Mettre à jour les informations de pagination
                    updatePaginationInfo();
                }

                // Fonction pour mettre à jour les informations de pagination
                function updatePaginationInfo() {
                    const start = (currentPage - 1) * itemsPerPage + 1;
                    const end = Math.min(currentPage * itemsPerPage, filteredData.length);
                    
                    document.getElementById('startIndex').textContent = start;
                    document.getElementById('endIndex').textContent = end;
                    document.getElementById('totalItems').textContent = filteredData.length;
                }

                // Fonction pour changer de page
                function changePage(page) {
                    if (page < 1 || page > totalPages) return;
                    
                    currentPage = page;
                    updateTable();
                    updatePagination();
                }

                // Fonction pour mettre à jour le tableau
                function updateTable() {
                    const start = (currentPage - 1) * itemsPerPage;
                    const end = start + itemsPerPage;
                    const pricingList = document.getElementById('pricingList');
                    
                    pricingList.innerHTML = '';
                    
                    filteredData.slice(start, end).forEach(price => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td data-label="Catégorie">${price.nom_categorie || 'Non défini'}</td>
                            <td data-label="Niveau">${price.niveau_etude || '-'}</td>
                            <td data-label="Prix Standard" class="text-end">${parseInt(price.prix_standard).toLocaleString()} FCFA</td>
                            <td data-label="Prix Urgent" class="text-end">${price.prix_urgent ? parseInt(price.prix_urgent).toLocaleString() + ' FCFA' : '-'}</td>
                            <td data-label="Seuil Mots" class="text-center">${parseInt(price.seuil_mots).toLocaleString()}</td>
                            <td data-label="Prix/Mot" class="text-end">${parseInt(price.prix_par_mot_supp).toLocaleString()} FCFA</td>
                            <td data-label="Délais" class="text-center">
                                <div class="d-flex flex-column align-items-center">
                                    <span class="badge bg-primary mb-1">Std: ${price.delai_standard_jours}j</span>
                                    ${price.delai_urgent_jours ? `<span class="badge bg-warning">Urg: ${price.delai_urgent_jours}j</span>` : ''}
                                </div>
                            </td>
                            <td data-label="Actions" class="text-end">
                                <div class="btn-group-action">
                                    <button class="btn btn-sm btn-info" onclick="viewPrice(${price.id})" title="Voir">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-warning" onclick="editPrice(${price.id})" title="Modifier">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" onclick="deletePrice(${price.id})" title="Supprimer">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        `;
                        pricingList.appendChild(row);
                    });
                }

                // Fonction pour charger les données
                function fetchPricing() {
                    fetch('get_pricing.php')
                        .then(response => {
                            if (!response.ok) throw new Error('Erreur de réseau');
                            return response.json();
                        })
                        .then(data => {
                            pricingData = data;
                            filteredData = [...data];
                            updateTable();
                            updatePagination();
                        })
                        .catch(error => {
                            console.error('Erreur:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Erreur',
                                text: 'Impossible de charger les tarifs'
                            });
                        });
                }

                // Fonction pour ouvrir le modal d'ajout
                function openAddModal() {
                    const pricingModal = document.getElementById('pricingModal');
                    if (!pricingModal) return;
                    
                    // Réinitialiser le formulaire
                    document.getElementById('pricingForm').reset();
                    // Supprimer l'ID caché
                    document.querySelector('input[name="id"]').value = '';
                    
                    // Initialiser et afficher le modal
                    const modal = new bootstrap.Modal(pricingModal);
                    modal.show();
                }

                // Fonction pour voir les détails d'un tarif
                function viewPrice(id) {
                    fetch(`get_pricing_details.php?id=${id}`)
                        .then(response => {
                            if (!response.ok) throw new Error('Erreur de réseau');
                            return response.json();
                        })
                        .then(data => {
                            Swal.fire({
                                title: 'Détails du tarif',
                                html: `
                                    <table class="table">
                                        <tr>
                                            <th>Catégorie</th>
                                            <td>${data.nom_categorie}</td>
                                        </tr>
                                        <tr>
                                            <th>Niveau</th>
                                            <td>${data.niveau_etude || '-'}</td>
                                        </tr>
                                        <tr>
                                            <th>Prix Standard</th>
                                            <td>${parseInt(data.prix_standard).toLocaleString()} FCFA</td>
                                        </tr>
                                        <tr>
                                            <th>Prix Urgent</th>
                                            <td>${data.prix_urgent ? parseInt(data.prix_urgent).toLocaleString() + ' FCFA' : '-'}</td>
                                        </tr>
                                        <tr>
                                            <th>Seuil Mots</th>
                                            <td>${data.seuil_mots}</td>
                                        </tr>
                                        <tr>
                                            <th>Prix/Mot sup.</th>
                                            <td>${data.prix_par_mot_supp} FCFA</td>
                                        </tr>
                                        <tr>
                                            <th>Délai Standard</th>
                                            <td>${data.delai_standard_jours} jours</td>
                                        </tr>
                                        <tr>
                                            <th>Délai Urgent</th>
                                            <td>${data.delai_urgent_jours ? data.delai_urgent_jours + ' jours' : '-'}</td>
                                        </tr>
                                    </table>
                                `,
                                width: '600px'
                            });
                        })
                        .catch(error => {
                            console.error('Erreur:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Erreur',
                                text: 'Impossible de charger les détails du tarif'
                            });
                        });
                }

                // Fonction pour éditer un tarif
                function editPrice(id) {
                    fetch(`get_pricing_details.php?id=${id}`)
                        .then(response => {
                            if (!response.ok) throw new Error('Erreur de récupération');
                            return response.json();
                        })
                        .then(data => {
                            // Remplir le formulaire avec les données
                            const form = document.getElementById('pricingForm');
                            
                            // Remplir les champs cachés et les champs principaux
                            form.querySelector('input[name="id"]').value = data.id;
                            form.querySelector('select[name="categorie_id"]').value = data.categorie_id;
                            form.querySelector('input[name="prix_standard"]').value = data.prix_standard;
                            form.querySelector('input[name="prix_urgent"]').value = data.prix_urgent || '';
                            form.querySelector('input[name="seuil_mots"]').value = data.seuil_mots;
                            form.querySelector('input[name="prix_par_mot_supp"]').value = data.prix_par_mot_supp;
                            form.querySelector('input[name="delai_standard_jours"]').value = data.delai_standard_jours;
                            form.querySelector('input[name="delai_urgent_jours"]').value = data.delai_urgent_jours || '';

                            // Réinitialiser les selects de classe et filière
                            form.querySelector('select[name="classe"]').value = '';
                            form.querySelector('select[name="filiere"]').value = '';

                            // Gérer le niveau d'étude
                            if (data.niveau_etude && data.niveau_etude !== 'RAS') {
                                const classeSelect = form.querySelector('select[name="classe"]');
                                const filiereSelect = form.querySelector('select[name="filiere"]');

                                // Vérifier si le niveau d'étude correspond à une classe
                                if (Array.from(classeSelect.options).some(opt => opt.value === data.niveau_etude)) {
                                    classeSelect.value = data.niveau_etude;
                                }
                                // Vérifier si le niveau d'étude correspond à une filière
                                else if (Array.from(filiereSelect.options).some(opt => opt.value === data.niveau_etude)) {
                                    filiereSelect.value = data.niveau_etude;
                                }
                            }

                            // Ouvrir le modal
                            const modal = new bootstrap.Modal(document.getElementById('pricingModal'));
                            modal.show();
                        })
                        .catch(error => {
                            console.error('Erreur:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Erreur',
                                text: error.message
                            });
                        });
                }

                // Fonction pour supprimer un tarif
                function deletePrice(id) {
                    if (!id) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Erreur',
                            text: 'ID non valide'
                        });
                        return;
                    }

                    Swal.fire({
                        title: 'Êtes-vous sûr?',
                        text: "Cette action est irréversible!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Oui, supprimer',
                        cancelButtonText: 'Annuler'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(`delete_pricing.php?id=${id}`, {
                                method: 'DELETE'
                            })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Erreur serveur');
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (data.success) {
                                    fetchPricing();
                                    Swal.fire(
                                        'Supprimé!',
                                        'Le tarif a été supprimé avec succès.',
                                        'success'
                                    );
                                } else {
                                    throw new Error(data.message || 'Erreur lors de la suppression');
                                }
                            })
                            .catch(error => {
                                console.error('Erreur:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Erreur',
                                    text: error.message
                                });
                            });
                        }
                    });
                }

                // Gestionnaire de formulaire
                document.getElementById('pricingForm').addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(this);
                    const id = formData.get('id');
                    
                    // Construire l'objet de données avec tous les champs
                    const jsonData = {
                        id: id,
                        categorie_id: parseInt(formData.get('categorie_id')),
                        prix_standard: parseInt(formData.get('prix_standard')),
                        prix_urgent: formData.get('prix_urgent') ? parseInt(formData.get('prix_urgent')) : null,
                        seuil_mots: parseInt(formData.get('seuil_mots') || 1000),
                        prix_par_mot_supp: parseInt(formData.get('prix_par_mot_supp') || 500),
                        delai_standard_jours: parseInt(formData.get('delai_standard_jours') || 7),
                        delai_urgent_jours: formData.get('delai_urgent_jours') ? parseInt(formData.get('delai_urgent_jours')) : null,
                        niveau_etude: formData.get('classe') || formData.get('filiere') || 'RAS'
                    };

                    // Validation de base
                    if (!jsonData.categorie_id || !jsonData.prix_standard || !jsonData.seuil_mots) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Erreur de validation',
                            text: 'Veuillez remplir tous les champs obligatoires'
                        });
                        return;
                    }

                    // Vérification de la configuration existante
                    fetch('check_pricing_config.php', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            id: jsonData.id,
                            categorie_id: jsonData.categorie_id,
                            prix_standard: jsonData.prix_standard,
                            prix_urgent: jsonData.prix_urgent,
                            niveau_etude: jsonData.niveau_etude
                        })
                    })
                    .then(response => response.json())
                    .then(checkResult => {
                        if (checkResult.exists) {
                            throw new Error('Une configuration identique existe déjà pour cette catégorie');
                        }

                        // Si la vérification passe, on procède à l'ajout/modification
                        const url = id ? 'update_pricing.php' : 'add_pricing.php';
                        const method = id ? 'PUT' : 'POST';

                        return fetch(url, {
                            method: method,
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(jsonData)
                        });
                    })
                    .then(response => {
                        if (!response.ok) throw new Error('Erreur serveur');
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // Fermer le modal
                            const modal = bootstrap.Modal.getInstance(document.getElementById('pricingModal'));
                            modal.hide();
                            
                            // Réinitialiser le formulaire
                            this.reset();
                            
                            // Rafraîchir la liste
                            fetchPricing();
                            
                            // Afficher le message de succès
                            Swal.fire({
                                icon: 'success',
                                title: 'Succès',
                                text: id ? 'Tarif modifié avec succès' : 'Tarif ajouté avec succès',
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        } else {
                            throw new Error(data.message || 'Erreur lors de l\'opération');
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Erreur',
                            text: error.message
                        });
                    });
                });

                // Fonctions de chargement des données
                function loadCategoriesIntoSelect() {
                    fetch('get_categories_for_select.php')
                        .then(response => {
                            if (!response || !response.ok) {
                                throw new Error('Erreur de réponse serveur');
                            }
                            return response.json();
                        })
                        .then(data => {
                            const select = document.querySelector('select[name="categorie_id"]');
                            select.innerHTML = '<option value="">Sélectionner une catégorie</option>';
                            data.forEach(category => {
                                select.innerHTML += `<option value="${category.id}">${category.nom}</option>`;
                            });
                        });
                }

                function loadClasses() {
                    fetch('get_classes.php')
                        .then(response => {
                            if (!response || !response.ok) {
                                throw new Error('Erreur de réponse serveur');
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (!Array.isArray(data)) {
                                throw new Error('Format de données invalide');
                            }
                            const select = document.querySelector('select[name="classe"]');
                            select.innerHTML = '<option value="">Sélectionner une classe</option>';
                            data.forEach(classe => {
                                select.innerHTML += `<option value="${classe.nom}">${classe.nom}</option>`;
                            });
                        })
                        .catch(error => {
                            console.error('Erreur chargement classes:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Erreur',
                                text: 'Impossible de charger les classes'
                            });
                        });
                }

                function loadFilieres() {
                    fetch('get_filieres.php')
                        .then(response => {
                            if (!response || !response.ok) {
                                throw new Error('Erreur de réponse serveur');
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (!Array.isArray(data)) {
                                throw new Error('Format de données invalide');
                            }
                            const select = document.querySelector('select[name="filiere"]');
                            select.innerHTML = '<option value="">Sélectionner une filière</option>';
                            data.forEach(filiere => {
                                select.innerHTML += `<option value="${filiere.nom}">${filiere.nom}</option>`;
                            });
                        })
                        .catch(error => {
                            console.error('Erreur chargement filières:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Erreur',
                                text: 'Impossible de charger les filières'
                            });
                        });
                }

                // Initialisation au chargement de la page
                document.addEventListener('DOMContentLoaded', function() {
                    fetchPricing();
                    loadCategoriesIntoSelect();
                    loadClasses();
                    loadFilieres();
                    
                    // Écouteur pour le changement de nombre d'éléments par page
                    document.getElementById('pageSizeSelect').addEventListener('change', function() {
                        itemsPerPage = parseInt(this.value);
                        currentPage = 1;
                        updateTable();
                        updatePagination();
                    });
                    
                    // Écouteurs pour les boutons de navigation
                    document.getElementById('prevFirst').addEventListener('click', () => changePage(1));
                    document.getElementById('prevPage').addEventListener('click', () => changePage(currentPage - 1));
                    document.getElementById('nextPage').addEventListener('click', () => changePage(currentPage + 1));
                    document.getElementById('nextLast').addEventListener('click', () => changePage(totalPages));
                });

                // Fonction pour basculer la sidebar
                function toggleSidebar() {
                    const sidebar = document.querySelector('.sidebar');
                    sidebar.classList.toggle('active');
                }

                // Fermer le menu au clic en dehors
                document.addEventListener('click', function(event) {
                    const sidebar = document.querySelector('.sidebar');
                    const navbarToggler = document.querySelector('.navbar-toggler');
                    
                    if (!sidebar.contains(event.target) && !navbarToggler.contains(event.target) && sidebar.classList.contains('active')) {
                        sidebar.classList.remove('active');
                    }
                });

                // Fermer le menu au clic sur un lien
                document.querySelectorAll('.sidebar .nav-link').forEach(link => {
                    link.addEventListener('click', function() {
                        const sidebar = document.querySelector('.sidebar');
                        if (window.innerWidth <= 768) {
                            sidebar.classList.remove('active');
                        }
                    });
                });
                </script>
            </div>
        </main>
    </div>
</body>
</html>